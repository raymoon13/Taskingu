---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Register">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <div class="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-green-100">
          <svg class="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
          </svg>
        </div>
        <h1 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Create your account
        </h1>
        <p class="mt-2 text-center text-sm text-gray-600">
          Already have an account?
          <a href="/signin" class="font-medium text-blue-600 hover:text-blue-500 transition-colors">
            Sign in
          </a>
        </p>
      </div>
      
      <div class="bg-white py-8 px-6 shadow-lg rounded-lg">
        <form id="register-form" class="space-y-6" method="post">
          <div class="space-y-4">
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
                Email address
              </label>
              <input 
                id="email" 
                name="email" 
                type="email" 
                autocomplete="email" 
                required 
                class="appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm transition-all"
                placeholder="Enter your email"
              />
              <p class="mt-1 text-xs text-gray-500">We'll never share your email with anyone.</p>
            </div>
            
            <div>
              <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
                Password
              </label>
              <input 
                id="password" 
                name="password" 
                type="password" 
                autocomplete="new-password" 
                required 
                minlength="6"
                class="appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm transition-all"
                placeholder="Create a strong password"
              />
              <p class="mt-1 text-xs text-gray-500">Password must be at least 6 characters long.</p>
            </div>

            <div>
              <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-2">
                Confirm Password
              </label>
              <input 
                id="confirm-password" 
                name="confirm-password" 
                type="password" 
                autocomplete="new-password" 
                required 
                class="appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm transition-all"
                placeholder="Confirm your password"
              />
            </div>
          </div>

          <div class="flex items-center">
            <input 
              id="terms" 
              name="terms" 
              type="checkbox" 
              required
              class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
            />
            <label for="terms" class="ml-2 block text-sm text-gray-900">
              I agree to the 
              <a href="#" class="text-blue-600 hover:text-blue-500 transition-colors">Terms of Service</a>
              and 
              <a href="#" class="text-blue-600 hover:text-blue-500 transition-colors">Privacy Policy</a>
            </label>
          </div>

          <div>
            <button 
              type="submit" 
              id="register-button"
              class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
            >
              <span class="absolute left-0 inset-y-0 flex items-center pl-3">
                <svg class="h-5 w-5 text-green-500 group-hover:text-green-400" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6zM16 7a1 1 0 10-2 0v1h-1a1 1 0 100 2h1v1a1 1 0 102 0v-1h1a1 1 0 100-2h-1V7z" />
                </svg>
              </span>
              Create account
            </button>
          </div>
        </form>
      </div>
      
      <div class="text-center">
        <p class="text-sm text-gray-500">
          Secure registration powered by Supabase
        </p>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { actions } from "astro:actions";

  const form = document.getElementById("register-form") as HTMLFormElement;
  const submitButton = document.getElementById("register-button") as HTMLButtonElement;
  const passwordInput = document.getElementById("password") as HTMLInputElement;
  const confirmPasswordInput = document.getElementById("confirm-password") as HTMLInputElement;

  // Password confirmation validation
  function validatePasswords() {
    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;
    
    if (confirmPassword && password !== confirmPassword) {
      confirmPasswordInput.setCustomValidity("Passwords don't match");
      return false;
    } else {
      confirmPasswordInput.setCustomValidity("");
      return true;
    }
  }

  confirmPasswordInput.addEventListener("input", validatePasswords);
  passwordInput.addEventListener("input", validatePasswords);

  form.addEventListener("submit", async (event) => {
    event.preventDefault();
    
    // Validate passwords match
    if (!validatePasswords()) {
      showError("Passwords don't match. Please check and try again.");
      return;
    }
    
    // Update button state
    submitButton.disabled = true;
    submitButton.textContent = "Creating account...";
    
    try {
      const formData = new FormData(form);
      // Remove confirm-password from form data since backend doesn't need it
      formData.delete("confirm-password");
      formData.delete("terms");
      
      const response = await actions.auth.register(formData);
      
      if (response.error) {
        showError(response.error.message);
        submitButton.disabled = false;
        submitButton.textContent = "Create account";
      } else {
        // Show success message
        submitButton.textContent = "Account created! Redirecting...";
        showSuccess("Account created successfully! Please check your email to verify your account.");
        
        // Redirect to signin after a short delay
        setTimeout(() => {
          window.location.href = "/signin";
        }, 2000);
      }
    } catch (error) {
      showError("An unexpected error occurred. Please try again.");
      submitButton.disabled = false;
      submitButton.textContent = "Create account";
    }
  });

  function showError(message: string) {
    removeMessages();
    const errorDiv = createMessage(message, "error");
    form.insertBefore(errorDiv, form.firstChild);
  }

  function showSuccess(message: string) {
    removeMessages();
    const successDiv = createMessage(message, "success");
    form.insertBefore(successDiv, form.firstChild);
  }

  function removeMessages() {
    const existingMessage = document.getElementById("message");
    if (existingMessage) {
      existingMessage.remove();
    }
  }

  function createMessage(message: string, type: "error" | "success") {
    const messageDiv = document.createElement("div");
    messageDiv.id = "message";
    
    if (type === "error") {
      messageDiv.className = "mb-4 p-4 bg-red-50 border border-red-200 rounded-md";
      messageDiv.innerHTML = `
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-800">${message}</p>
          </div>
        </div>
      `;
    } else {
      messageDiv.className = "mb-4 p-4 bg-green-50 border border-green-200 rounded-md";
      messageDiv.innerHTML = `
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-green-800">${message}</p>
          </div>
        </div>
      `;
    }
    
    return messageDiv;
  }
</script>